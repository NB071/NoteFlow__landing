@use "sass:map";

// >> This file contains general-purpose mixins <<

/// Creates a linear gradient background.
///
/// @param {string} $direction - Direction of the gradient (e.g., to right, 45deg)
/// @param {color} $start - Starting color
/// @param {color} $end - Ending color
@mixin gradient-bg($direction, $start, $end) {
	background: linear-gradient($direction, $start 0%, $end 100%);
}

/// Adds configurable hover effects such as transform, shadow, color changes, etc.
///
/// @param {map} $options - A map of hover options:
/// - `shadow`: Box shadow color (optional)
/// - `filter`: CSS filter (optional)
/// - `transform`: Transform value (optional)
/// - `bg`: Background color on hover (optional)
/// - `color`: Text color on hover (optional)
/// - `bdr-color`: Border color on hover (optional)
/// - `transition`: Transition duration (optional, defaults to 0.5s)
@mixin hover-effect($options: ()) {
	$shadow: map.get($options, shadow);
	$filter: map.get($options, filter);
	$transform: map.get($options, transform);
	$bg: map.get($options, bg);
	$color: map.get($options, color);
	$bdr-color: map.get($options, bdr-color);
	$transition: if(
		map.has-key($options, transition),
		map.get($options, transition),
		0.5s
	);

	&:hover {
		@if $transform {
			transform: $transform;
		}
		@if $shadow {
			box-shadow: 0 0 25px $shadow;
		}
		@if $filter {
			filter: $filter;
		}
		@if $bg {
			background-color: $bg;
		}
		@if $color {
			color: $color;
		}
		@if $bdr-color {
			border-color: $bdr-color;
		}
	}

	& {
		transition: all $transition ease-in-out !important;
	}
}

/// Base mixin for flex and inline-flex layouts.
/// Provides control over direction, alignment, wrapping, and gap.
///
/// @param {string} $display - flex or inline-flex
/// @param {string|false} $direction - flex-direction (row, column, etc.)
/// @param {string|false} $align - align-items value
/// @param {string|false} $justify - justify-content value
/// @param {string|false} $wrap - flex-wrap value
/// @param {string|false} $gap - gap between flex children
@mixin flex-variant(
	$display,
	$direction: false,
	$align: false,
	$justify: false,
	$wrap: false,
	$gap: false
) {
	display: $display;

	@if $direction {
		flex-direction: $direction;
	}

	@if $align {
		align-items: $align;
	}

	@if $justify {
		justify-content: $justify;
	}

	@if $wrap {
		flex-wrap: $wrap;
	}

	@if $gap {
		gap: $gap;
	}

	// fix
	& > * {
		min-width: 0;
	}
}

/// Shortcut for a standard `flex` layout.
/// Uses `flex-variant` internally.
///
/// @see flex-variant
@mixin flex(
	$direction: false,
	$align: false,
	$justify: false,
	$wrap: false,
	$gap: false
) {
	@include flex-variant(
		flex,
		$direction: $direction,
		$align: $align,
		$justify: $justify,
		$wrap: $wrap,
		$gap: $gap
	);
}

/// Shortcut for an `inline-flex` layout.
/// Uses `flex-variant` internally.
///
/// @see flex-variant
@mixin inline-flex(
	$direction: false,
	$align: false,
	$justify: false,
	$wrap: false,
	$gap: false
) {
	@include flex-variant(
		inline-flex,
		$direction: $direction,
		$align: $align,
		$justify: $justify,
		$wrap: $wrap,
		$gap: $gap
	);
}
